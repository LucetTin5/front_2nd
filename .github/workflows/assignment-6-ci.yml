name: CI Assignment 6

on:
  pull_request:
    types:
      - opened
    paths:
      - 'packages/assignment-6/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Job1 (Build)
        id: job1
        run: |
          pnpm -F assignment-6 install
          pnpm -F assignment-6 build

      - name: Comment on Error
        if: failure() && steps.job1.outcome == 'failure'
        uses: actions/github-script@v4
        with:
          github_token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue_number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: `Build failed. Please check the error message and fix it.`
            })

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm -F assignment-6 install

      - name: Run ESLint
        id: job2
        run: pnpm -F assignment-6 lint > eslint_output.txt

      - name: Set ESLint output to env
        if: failure() && steps.job2.outcome == 'failure'
        run: echo "ESLINT_OUTPUT=$(cat eslint_output.txt)" >> $GITHUB_ENV

      - name: Comment ESLint results
        uses: actions/github-script@v6
        if: failure() && steps.job2.outcome == 'failure'
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const eslintOutput = process.env.ESLINT_OUTPUT || 'No ESLint output available';
            const errorMessage = `
            ## ESLint Results
            ---
            \`\`\`
            ${eslintOutput}
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: errorMessage
            })

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm -F assignment-6 install

      - name: Job3 (Test)
        id: job3
        run: pnpm -F assignment-6 test:coverage > coverage.txt

      - name: Parse coverage and comment
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            # Parse Coverage.txt
            const fs = require('fs');
            const coverage = fs.readFileSync('coverage.txt', 'utf-8');
            const scoreOfAllFiles = coverage.split('\n').find((line) => line.includes('All files'));
            const scores = scoreOfAllFiles.match(/\d+\.\d+/g);
            const [statements, branches, functions, lines] = scores.map(parseFloat);

            # Comment on PR
            const coverageMessage = `
              ## 테스트 성공 ✅
              ---
              ### 커버리지 결과

              - 라인 커버리지: ${lines}%
              - 브랜치 커버리지: ${branches}%
              - 함수 커버리지: ${functions}%
              - 구문 커버리지: ${statements}%
            `

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: coverageMessage
            })

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: job4 구현
        run: echo "job4의 내용을 구현해주세요"

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"
